Emmet ma fajne skróty dla CSS, np:
    gtc -> grid-template-columns.
    gce -> grid-column-end.

Idea grida polega na podzieleniu dowolnego elementu DOM na siatkę i przypisania elementów dzieci do różnych miejsc tej siatki.
! Pozycjonowanie elementów dotyczy wyłącznie bezpośrednich dzieci elementu, który ma ustawiony display: grid.
    container > items
Grid eliminuje konieczność używania dziwnych tricków css do pozycjonowania.
    Kiedyś wcale nie było tak łatwo zrobić jedną kolumnę 300px a resztę auto.
Dostępne podziały px, %, fr, auto. repeat
    Lepiej zastąpić % nowymi podziałami "fr".

grid-template-columns:
grid-template-rows:
    Za pomocą tych właściwości oraz jednostek podziału ustalamy podział na kolumny i wiersze.

grid-gap:
    Odległość między elementami.

Explicit vs implicit grid.

Grid tracks oraz Grid lines.
    Track to ścieżka kolumny lub rzędu.
    Grid line to linie między trackami, jest ich zawsze o jedną więcej niż kolumn/rzędów. Numerowane od 1.

W FDA:
- pełne linie to obszar explicit grida.
- linie kreskowane są explicit
- linie kropkowane są implicit.

Explicit vs Implicit CSS Grid:
    Explicit:
        Wszystko co zadeklarowane przez developera.
    Implicit:
        W przypadku braku reguł explicit, ustawiane przez przeglądarkę domyślnie.
    Pełna linia graniczna całego Grida, obejmuje obszar zadeklarowany przez właściwości explicit rzędów i kolumn.
    Domyślne wartości implicit można zmienić za pomocą właściwości:
        grid-auto-rows: 100px;
        grid-auto-columns: 250px;

! auto-flow. Domyślne zachowanie Grida to tworzenie kolejnych rzędów implicit dla elementów poza explicit gridem.
    Z tego powodu, właściwość grid-auto-columns nie ma wpływu, bez zmiany grid-auto-flow.
    Po ustawieniu grid-auto-flow: columns, Grid będzie wrzucał "pozostałe" elementy do kolumn implicit.

Ustawianie rozmiarów ścieżek (kolumn i rzędów):
    Mieszanie grid-gap w prikselach z grid-template-columns w procentach powoduje wyjście poza 100% w poziomie.
    ! Aby wygodnie pilnować trzymania 100% obszaru strony przy jednoczesnym stosowaniu gapu/marginesów w px, lepiej stosować fr zamiast %.
        Wtedy Grid sam weźmie pod uwagę gapy w px i wymiary viewporta okna, a następnie sam dobierze rozmiary elementów.
    ! The fr unit represents a fraction of the leftover space in the grid container.
        Jednostka fr jest elastyczna, reprezentuje część pozostałego/wolnego miejsca w kontenerze Grida.
        Grid wpierw układa elementy, które mają explicit konkretne rozmiary
        fr stands for free space
    ! Domyślne rozmiary Grida:
        Szeroki na szerokość viewporta
        Wysoki zależnie od sumy wysokości wszystkich elementów.
    grid-template-columns: auto
        Kolumna auto i każdy element w niej ma szerokość najszerszego elementu w tej scieżce.
        Z tego powodu pomocą samego auto nie da się zrobić układu w stylu Pinteresta.

repeat(ilośćPowt, wartość)
    Pozwala powtórzyć dane wartości właściwości CSS.
        repeat(4, 1f)       daje "1fr 1fr 1fr 1fr"
        repeat(2, 3fr 1fr)  daje "3fr 1fr 3fr 1fr"
        repeat(2, auto 1f)  daje "auto 1fr auto 1fr"
    Może być jedną z wartości obok innych:
        grid-template-columns: auto repeat(3, 1fr) 2fr;

Ustawianie rozmiarów elementów Grida:
    Ustawienie szerokości jednego elementu na sztywno (px, %) wpływa na rozmiary całej ścieżki w której jest ten element.
    Domyślnie, zawartość elementu również wpływa na jego rozmiary a tym samym na ścieżkę.
    grid-column: span 3;
        Ustawiamy ile kolumn ma zajmować element.
        Jeśli span będzie zbyt duży by element się zmieścił w ścieżce, element przeskoczy do kolejnej ścieżki w której się zmieści.
        Jeśli span będzie większy niż ilość wcześniej zadeklarowanych ścieżek, grid stworzy dodatkowe, implicit ścieżki.
        Zbyt duże rozmiary zawartości tego elementu dalej będą wpływać na całą kolumnę.

Pozycjonowanie elementów w Gridzie:
    ! -1 zawsze oznacza linię końca, niezależnie od ilości ścieżek i tego jak się zmieniają.
            Jest bardziej uniwersalne i odporne na zmiany.
    ! -1 działa w oczekiwany sposób przy zadeklarowaniu explicit kolumn i rzędów.
    ! Pamiętaj, że jeśli chcesz jakiś element na końcu ścieżki, -1 musi być ustawione na column-end albo row-end!

    grid-column-start: 2;
    grid-column-end: 4;
    grid-column: 2 / 4;
        Zapisy są równoznaczne.

    grid-column: 1 / span 3;
        Początek na 1 kolumnie, obszar trzech kolumn.
    grid-column: span 2 / 4;
        Obszar trzech kolumn, koniec na 4tej ścieżce.

    grid-column: 1 / -1;
        -1 oznacza linię końcową.
        -2 oznacza drugą linię od końca.

    grid-column: 1 / -1;
    grid-row: 1 / -1;
        Pokrywa całego explicit Grida.


auto-fill vs auto-fit:
    grid-template-columns: repeat(auto-fill, 100px);
        Tworzy kolumny po 100px, tyle ile się zmieści do końca szerokości strony.
        Niezależny od ilości elementów.
        Jeśli elementów jest mniej niż kolumn, wstawia puste kolumny.
        Explicit grid kończy się na ostatniej kolumnie.
    auto-fit 
        Zachowuje się jak auto-fill, ale po ułożeniu elementów, jeśli elementów jest mniej niż kolumn, redukuje puste kolumny.
        Zależny od ilości elementów.
        Explicit grid kończy się na ostatnim elemencie.

    Typowe zastosowanie, gdy chcesz mieć część elementów z lewej, a jeden z prawej:
        .container {
            grid-template-columns: repeat(auto-fill, 150px);
        }
        .lastItem {
            column-end: -1;
        }

minmax():
    Kombinacja auto-fill/fit z minmax() zastępuje dużą część media queries, bo jest responsywna z natury.
    minmax() określa minimalne i maksymalne rozmiary ścieżki, tworzonej przez funkcję repeat().
    
    Typowe zastosowanie:
        .container {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }
        auto-fit tworzy kolumny na całą szerokość strony.
        minmax ustawia minimalny rozmiar elementu na 150px, natomiast 1fr połączone z auto-fit wypełnia

    fitcontent(150px), jako rozmiar kolumny w grid-template-columns, ogranicza rozmiar elementów do 150px.
        Czasem się może przydać.

grid-template-areas:
    Nazwy należy umieścić w pazurkach:
        grid-template-areas: "sidebar-1 content sidebar-2";
    Kropka oznacza pole bez nazwy.
        grid-template-areas: "header header .";
    Używanie grid-template-area pomaga w definiowaniu responsywności.
        Elementy będą się trzymać przypisanym im obszarom, niezależnie od zmian rozmiarów ścieżek lub umiejscowienia obszarów za pomocą media queries.
        Często wystarczy jedynie przedefiniować układ obszarów, jeśli ścieżki są porządnie zdefiniowane.
    Po zdefiniowaniu obszarów, dostępne są również domyślne nazwy linii "*-start" i "*-end" od nazw obszarów.
        .container {
            grid-template-areas: "sidebar-1 content sidebar-2";
        }
        .item5 {
            grid-column: sidebar-1-start / sidebar-1-end;
        }
    
Nazywanie linii za pomocą nawiasów []:
    Można również dać więcej w nawiasach, wtedy obie wskazują na to samo miejsce.
        grid-template-columns: [site-start sidebar-start] 1fr [content-start sidebar-end] 500px [content-end] 1fr [site-end];

grid-auto-flow dense:
    Domyślnie Grid układa elementy z przerwami, jeśli niektóre są zbyt duże i przeskakują do następnej ścieżki.
    Opcja dense powoduje upychanie "luźnych" elementów w puste miejsca, z pominięciem ich kolejności, po ułożeniu elementów ze sztywnymi definicjami położenia.

Centering / Aligning elementów (ustawiaj oś kolumn pierwszą, rzędów drugą):
    Nawet jeśli szkielet strony nie jest oparty na Gridzie, warto go używać do wyśrodkowywania zawartości elementów.
        .item {
            display: grid;
            justify-content: center;
            align-items: center;
        }
    Domyślnie elementy w kontenerze Grida mają ustawione:
        align-items: stretch;
        justify-items: stretch;
    Domyślnie, cała zawartość kontenera Grida ma ustawione:
        justify-content: start;

    align-*
        osią jest kolumna, przesuwa elementy na osi kolumn
    justify-*
        osią jest rząd, przesuwa elementy na osi rzędów
    place-*
        ustawia obie właściwości

    *-content
        Ustawienie położenia całej zawartości kontenera Grida.
    *-items
        Używany w obrębie kontenera Grida.
    *-self
        Używany jako właściwość danego elementu.
        Nadpisuje ustawienia content oraz items.


    stretch, center, start, end

    place-items: center center;
        Ustawia wartości align i justify za jednym zamachem.
        Align, czyli kolumny/wertykalnie pierwsze.

    Przydatne i często używane, gdy kontener grida jest szerszy niż jego zawartość:
        justify-content: space-between;
            Dzieli pozostałe miejsce na równe części i dokłada je między elementami.
        justify-content: space-around;
            Dzieli pozostałe miejsce na równe części i dokłada je po obu stronach elementów.
        Można użyć tych wartości również dla align, ale zwykle strony nie mają sztywnej wysokości.

Order:
    Domyślne ustawienie:
        order: 0;
    Za pomocą zmian wartości order, można zmieniać kolejność układania elementów w Gridzie.
    Zmiany orderu mieszają z kolejnością zaznaczania tekstu na stronie oraz z czytnikami stron (dla niewidomych?).